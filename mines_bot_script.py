import asyncio
import telebot.async_telebot as telebot
from sqlalchemy import update, select
from telebot import types
import os
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

from database.engine import drop_db, create_db, session_maker
from database.models import User


bot = telebot.AsyncTeleBot(token=os.getenv("BOT_TOKEN"))
TARGET_CHANNEL = os.getenv("TARGET_CHANNEL")
ADMIN_1 = os.getenv("ADMIN_USERNAME_1")
ADMIN_2 = os.getenv("ADMIN_USERNAME_2")

async def is_subscriber(channel_id, user_id):
    try:
        subscription = await bot.get_chat_member(channel_id, user_id)
        if subscription.status in ['member', 'administrator', 'creator']:
            return True
        else:
            return False
    except Exception as e:
        print("Error:", e)
        return False

@bot.message_handler(commands=['start'])
async def start(message):
    async with session_maker() as session:
        user_find = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        if user_find.scalar_one_or_none() is None:
            user = User(username=message.from_user.username, telegram_id=message.from_user.id, full_name=message.from_user.full_name, casino_id=None)
            session.add(user)
            await session.commit()
    keyboardmain = types.InlineKeyboardMarkup(row_width=1)
    subscribe_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/+yQs4rShgVG04ZmEy")
    check_button = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_subscription")
    keyboardmain.add(subscribe_button, check_button)
    await bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}! \n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ªü§ù", reply_markup=keyboardmain)

@bot.callback_query_handler(func=lambda call:True)
async def callback_inline(call):
    if call.data == "check_subscription":
        # –ó–¥–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
        # –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if await is_subscriber(channel_id=TARGET_CHANNEL,
                         user_id=call.message.chat.id
                         ):
            call.data = "subscriber"
        else:
            await bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª")
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)

    if call.data == "subscriber":
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        register_button = types.InlineKeyboardButton(text="üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration")
        instruction_button = types.InlineKeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
        get_signal_button = types.InlineKeyboardButton(text="üí£ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª üí£", callback_data="get_signal")
        keyboard.add(register_button, instruction_button, get_signal_button)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
        await bot.send_message(chat_id=call.message.chat.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üî∏MINES BitsGap V3.0üî∏!\n"
                                                            "üí£Mines - —ç—Ç–æ –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù.\n"
                                                            "–í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.\n\n\n"
                                                            "–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenAI.\n"
                                                            "–û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 85%.",
                         reply_markup=keyboard
                         )

    if call.data == "registration":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        register_button = types.InlineKeyboardButton(text="üì± üî∂–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url='https://1wytvn.life/?open=register#q7r9')
        back_button = types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="subscriber")
        keyboard.add(register_button, back_button)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
        await bot.send_message(chat_id=call.message.chat.id,
                         text="üî∑ 1. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç–µ <a href='https://1wytvn.life/?open=register#q7r9' style='text-decoration:none'>1WIN (CLICK)</a>\n"
                              "üî∑ 2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ c–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç–µ (–í–∫–ª–∞–¥–∫–∞ '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' –∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±—É–¥–µ—Ç –≤–∞—à ID).)\n"
                              "üî∑ 3. –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                         reply_markup=keyboard,
                         parse_mode='HTML',
                         disable_web_page_preview=True
                         )


    if call.data == "instruction":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        back_button = types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="subscriber")
        keyboard.add(back_button)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
        await bot.send_message(chat_id=call.message.chat.id, text="–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üñ• [bitsGap].\n\n"
                                                       "–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –±—ã–ª–æ —Å—ã–≥—Ä–∞–Ω–æ üé∞10.000+ –∏–≥—Ä.\n"
                                                       "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–µ–ª–∞—é—Ç –≤ –¥–µ–Ω—å 15-25% –æ—Ç —Å–≤–æ–µ–≥–æ üí∏ –∫–∞–ø–∏—Ç–∞–ª–∞!\n\n"
                                                       "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –ø–æ —Å–µ–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏  –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –¢–æ—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 92%!\n\n"
                                                       "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n"
                                                       "üü¢ 1. –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ <a href='https://1wytvn.life/?open=register#q7r9' style='text-decoration:none'>1WIN (CLICK)</a>\n"
                                                       "–ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è - –∑–∞—Ö–æ–¥–∏–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º VPN (–®–≤–µ—Ü–∏—è). –í Play Market/App Store –ø–æ–ª–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: Vpnify, Planet VPN, Hotspot VPN –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ!\n\n"
                                                       "–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç!\n\n"
                                                       "üü¢ 2. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                                                       "üü¢ 3. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª 1win games –∏ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É üí£'MINES'.\n\n"
                                                       "üü¢ 4. –í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ª–æ–≤—É—à–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ —Ç—Ä—ë—Ö. –≠—Ç–æ –≤–∞–∂–Ω–æ!\n\n"
                                                       "üü¢ 5. –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –±–æ—Ç–µ –∏ —Å—Ç–∞–≤–∏—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –∏–∑ –±–æ—Ç–∞.\n\n"
                                                       "üü¢ 6. –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ —Å–æ–≤–µ—Ç—É–µ–º —É–¥–≤–æ–∏—Ç—å(–•¬≤) —Å—Ç–∞–≤–∫—É —á—Ç–æ –±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫—Ä—ã—Ç—å –ø–æ—Ç–µ—Ä—é –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–∏–≥–Ω–∞–ª–µ",
                         reply_markup=keyboard,
                         parse_mode="HTML",
                         disable_web_page_preview=True
                         )

    if call.data == "get_signal":
        async with session_maker() as session:
            user1 = await session.execute(select(User).where(User.telegram_id == call.message.chat.id))
            user2 = await session.execute(select(User).where(User.telegram_id == call.message.chat.id))
            if (user1.scalar_one_or_none() is None) or (user2.scalar_one_or_none().casino_id is None):
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                register_button = types.InlineKeyboardButton(text="üì± üî∂–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                                                             url='https://1wytvn.life/?open=register#q7r9')
                keyboard.add(register_button)
                await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
                await bot.send_message(chat_id=call.message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–∏–≥–Ω–∞–ª–∞", reply_markup=keyboard)
            else:
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                webapp = types.WebAppInfo("https://yemines.ru/")
                apple_app_button = types.InlineKeyboardButton(text="üçè –û—Ç–∫—Ä—ã—Ç—å Web app IOS", web_app=webapp)
                android_app_button = types.InlineKeyboardButton(text="ü§ñ –û—Ç–∫—Ä—ã—Ç—å Android | WINDOWS", web_app=webapp)
                back_button = types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="subscriber")
                keyboard.add(apple_app_button, android_app_button, back_button)
                await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
                await bot.send_message(chat_id=call.message.chat.id, text="–í–ï–ë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

    if call.data == "close_menu":
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)


@bot.message_handler(func=lambda message: message.text.isdigit() and len(message.text) <= 10)
async def handle_custom_number(message):
    async with session_maker() as session:
        user1 = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user2 = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        if user1.scalar_one_or_none() and (user2.scalar_one_or_none().casino_id is None):
            await session.execute(update(User).where(User.telegram_id == message.from_user.id).values(casino_id=message.text))
            await session.commit()
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            instruction_button = types.InlineKeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
            get_signal_button = types.InlineKeyboardButton(text="üí£ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª üí£", callback_data="get_signal")
            close_menu_button = types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", callback_data="close_menu")
            keyboard.add(get_signal_button, instruction_button, close_menu_button)
            await bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º.", reply_markup=keyboard)



@bot.message_handler(func=lambda message: (message.text and not (message.text.isdigit())) and (message.from_user.username == ADMIN_1 or message.from_user.username == ADMIN_2))
async def handle_admin_post(message):
    async with session_maker() as session:
        result = await session.execute(select(User))
        users = result.scalars()
        for user in users:
            await bot.send_message(chat_id=user.telegram_id, text=message.text)

@bot.message_handler(content_types=['photo', 'document', 'video'])
async def handle_admin_post_photo(message):
    print(message)
    if (message.from_user.username == ADMIN_1) or (message.from_user.username == ADMIN_2):
        async with session_maker() as session:
            result = await session.execute(select(User))
            users = result.scalars()
            for user in users:
                await bot.copy_message(chat_id=user.telegram_id, from_chat_id=message.chat.id, message_id=message.id)


async def on_startup(bot):
    run_param = False
    if run_param:
        await drop_db()

    await create_db()


async def on_shutdown(bot):
    print('Bot shut down...')

async def main():
    await on_startup(bot)
    await bot.polling(none_stop=True)

asyncio.run(main())